/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import { __assign, __extends } from "tslib";
import * as msRest from "@azure/ms-rest-js";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import * as Parameters from "./models/parameters";
import { FormRecognizerClientContext } from "./formRecognizerClientContext";
var FormRecognizerClient = /** @class */ (function (_super) {
    __extends(FormRecognizerClient, _super);
    /**
     * Initializes a new instance of the FormRecognizerClient class.
     * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:
     * https://westus2.api.cognitive.microsoft.com).
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param [options] The parameter options
     */
    function FormRecognizerClient(credentials, endpoint, options) {
        return _super.call(this, credentials, endpoint, options) || this;
    }
    FormRecognizerClient.prototype.trainCustomModel = function (trainRequest, options, callback) {
        return this.sendOperationRequest({
            trainRequest: trainRequest,
            options: options
        }, trainCustomModelOperationSpec, callback);
    };
    FormRecognizerClient.prototype.getExtractedKeys = function (id, options, callback) {
        return this.sendOperationRequest({
            id: id,
            options: options
        }, getExtractedKeysOperationSpec, callback);
    };
    FormRecognizerClient.prototype.getCustomModels = function (options, callback) {
        return this.sendOperationRequest({
            options: options
        }, getCustomModelsOperationSpec, callback);
    };
    FormRecognizerClient.prototype.getCustomModel = function (id, options, callback) {
        return this.sendOperationRequest({
            id: id,
            options: options
        }, getCustomModelOperationSpec, callback);
    };
    FormRecognizerClient.prototype.deleteCustomModel = function (id, options, callback) {
        return this.sendOperationRequest({
            id: id,
            options: options
        }, deleteCustomModelOperationSpec, callback);
    };
    FormRecognizerClient.prototype.analyzeWithCustomModel = function (id, formStream, options, callback) {
        return this.sendOperationRequest({
            id: id,
            formStream: formStream,
            options: options
        }, analyzeWithCustomModelOperationSpec, callback);
    };
    FormRecognizerClient.prototype.batchReadReceipt = function (url, options, callback) {
        return this.sendOperationRequest({
            url: url,
            options: options
        }, batchReadReceiptOperationSpec, callback);
    };
    FormRecognizerClient.prototype.getReadReceiptResult = function (operationId, options, callback) {
        return this.sendOperationRequest({
            operationId: operationId,
            options: options
        }, getReadReceiptResultOperationSpec, callback);
    };
    FormRecognizerClient.prototype.batchReadReceiptInStream = function (image, options, callback) {
        return this.sendOperationRequest({
            image: image,
            options: options
        }, batchReadReceiptInStreamOperationSpec, callback);
    };
    return FormRecognizerClient;
}(FormRecognizerClientContext));
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var trainCustomModelOperationSpec = {
    httpMethod: "POST",
    path: "custom/train",
    urlParameters: [
        Parameters.endpoint
    ],
    requestBody: {
        parameterPath: "trainRequest",
        mapper: __assign(__assign({}, Mappers.TrainRequest), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.TrainResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var getExtractedKeysOperationSpec = {
    httpMethod: "GET",
    path: "custom/models/{id}/keys",
    urlParameters: [
        Parameters.endpoint,
        Parameters.id
    ],
    responses: {
        200: {
            bodyMapper: Mappers.KeysResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var getCustomModelsOperationSpec = {
    httpMethod: "GET",
    path: "custom/models",
    urlParameters: [
        Parameters.endpoint
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ModelsResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var getCustomModelOperationSpec = {
    httpMethod: "GET",
    path: "custom/models/{id}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.id
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ModelResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var deleteCustomModelOperationSpec = {
    httpMethod: "DELETE",
    path: "custom/models/{id}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.id
    ],
    responses: {
        204: {},
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var analyzeWithCustomModelOperationSpec = {
    httpMethod: "POST",
    path: "custom/models/{id}/analyze",
    urlParameters: [
        Parameters.endpoint,
        Parameters.id
    ],
    queryParameters: [
        Parameters.keys
    ],
    formDataParameters: [
        Parameters.formStream
    ],
    contentType: "multipart/form-data",
    responses: {
        200: {
            bodyMapper: Mappers.AnalyzeResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var batchReadReceiptOperationSpec = {
    httpMethod: "POST",
    path: "prebuilt/receipt/asyncBatchAnalyze",
    urlParameters: [
        Parameters.endpoint
    ],
    requestBody: {
        parameterPath: {
            url: "url"
        },
        mapper: __assign(__assign({}, Mappers.ImageUrl), { required: true })
    },
    responses: {
        202: {
            headersMapper: Mappers.BatchReadReceiptHeaders
        },
        default: {
            bodyMapper: Mappers.ComputerVisionError
        }
    },
    serializer: serializer
};
var getReadReceiptResultOperationSpec = {
    httpMethod: "GET",
    path: "prebuilt/receipt/operations/{operationId}",
    urlParameters: [
        Parameters.endpoint,
        Parameters.operationId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ReadReceiptResult
        },
        default: {
            bodyMapper: Mappers.ComputerVisionError
        }
    },
    serializer: serializer
};
var batchReadReceiptInStreamOperationSpec = {
    httpMethod: "POST",
    path: "prebuilt/receipt/asyncBatchAnalyze",
    urlParameters: [
        Parameters.endpoint
    ],
    requestBody: {
        parameterPath: "image",
        mapper: {
            required: true,
            serializedName: "Image",
            type: {
                name: "Stream"
            }
        }
    },
    contentType: "application/octet-stream",
    responses: {
        202: {
            headersMapper: Mappers.BatchReadReceiptInStreamHeaders
        },
        default: {
            bodyMapper: Mappers.ComputerVisionError
        }
    },
    serializer: serializer
};
export { FormRecognizerClient, FormRecognizerClientContext, Models as FormRecognizerModels, Mappers as FormRecognizerMappers };
//# sourceMappingURL=formRecognizerClient.js.map