/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@azure/ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', '@azure/ms-rest-js'], factory) :
    (global = global || self, factory((global.Azure = global.Azure || {}, global.Azure.CognitiveservicesFormrecognizer = {}), global.msRest));
}(this, (function (exports, msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var index = /*#__PURE__*/Object.freeze({
        __proto__: null
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */
    var TrainSourceFilter = {
        serializedName: "TrainSourceFilter",
        type: {
            name: "Composite",
            className: "TrainSourceFilter",
            modelProperties: {
                prefix: {
                    serializedName: "prefix",
                    constraints: {
                        MaxLength: 128,
                        MinLength: 0
                    },
                    type: {
                        name: "String"
                    }
                },
                includeSubFolders: {
                    serializedName: "includeSubFolders",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var TrainRequest = {
        serializedName: "TrainRequest",
        type: {
            name: "Composite",
            className: "TrainRequest",
            modelProperties: {
                source: {
                    required: true,
                    serializedName: "source",
                    constraints: {
                        MaxLength: 2048,
                        MinLength: 0
                    },
                    type: {
                        name: "String"
                    }
                },
                sourceFilter: {
                    serializedName: "sourceFilter",
                    type: {
                        name: "Composite",
                        className: "TrainSourceFilter"
                    }
                }
            }
        }
    };
    var FormDocumentReport = {
        serializedName: "FormDocumentReport",
        type: {
            name: "Composite",
            className: "FormDocumentReport",
            modelProperties: {
                documentName: {
                    serializedName: "documentName",
                    type: {
                        name: "String"
                    }
                },
                pages: {
                    serializedName: "pages",
                    type: {
                        name: "Number"
                    }
                },
                errors: {
                    serializedName: "errors",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                status: {
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var FormOperationError = {
        serializedName: "FormOperationError",
        type: {
            name: "Composite",
            className: "FormOperationError",
            modelProperties: {
                errorMessage: {
                    serializedName: "errorMessage",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TrainResult = {
        serializedName: "TrainResult",
        type: {
            name: "Composite",
            className: "TrainResult",
            modelProperties: {
                modelId: {
                    nullable: false,
                    serializedName: "modelId",
                    type: {
                        name: "Uuid"
                    }
                },
                trainingDocuments: {
                    serializedName: "trainingDocuments",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "FormDocumentReport"
                            }
                        }
                    }
                },
                errors: {
                    serializedName: "errors",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "FormOperationError"
                            }
                        }
                    }
                }
            }
        }
    };
    var KeysResult = {
        serializedName: "KeysResult",
        type: {
            name: "Composite",
            className: "KeysResult",
            modelProperties: {
                clusters: {
                    serializedName: "clusters",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Sequence",
                                element: {
                                    type: {
                                        name: "String"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    };
    var ModelResult = {
        serializedName: "ModelResult",
        type: {
            name: "Composite",
            className: "ModelResult",
            modelProperties: {
                modelId: {
                    nullable: false,
                    serializedName: "modelId",
                    type: {
                        name: "Uuid"
                    }
                },
                status: {
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                },
                createdDateTime: {
                    serializedName: "createdDateTime",
                    type: {
                        name: "DateTime"
                    }
                },
                lastUpdatedDateTime: {
                    serializedName: "lastUpdatedDateTime",
                    type: {
                        name: "DateTime"
                    }
                }
            }
        }
    };
    var ModelsResult = {
        serializedName: "ModelsResult",
        type: {
            name: "Composite",
            className: "ModelsResult",
            modelProperties: {
                modelsProperty: {
                    serializedName: "models",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ModelResult"
                            }
                        }
                    }
                }
            }
        }
    };
    var InnerError = {
        serializedName: "InnerError",
        type: {
            name: "Composite",
            className: "InnerError",
            modelProperties: {
                requestId: {
                    serializedName: "requestId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ErrorInformation = {
        serializedName: "ErrorInformation",
        type: {
            name: "Composite",
            className: "ErrorInformation",
            modelProperties: {
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                innerError: {
                    serializedName: "innerError",
                    type: {
                        name: "Composite",
                        className: "InnerError"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ErrorResponse = {
        serializedName: "ErrorResponse",
        type: {
            name: "Composite",
            className: "ErrorResponse",
            modelProperties: {
                error: {
                    serializedName: "error",
                    type: {
                        name: "Composite",
                        className: "ErrorInformation"
                    }
                }
            }
        }
    };
    var ExtractedToken = {
        serializedName: "ExtractedToken",
        type: {
            name: "Composite",
            className: "ExtractedToken",
            modelProperties: {
                text: {
                    serializedName: "text",
                    type: {
                        name: "String"
                    }
                },
                boundingBox: {
                    serializedName: "boundingBox",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Number"
                            }
                        }
                    }
                },
                confidence: {
                    serializedName: "confidence",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var ExtractedKeyValuePair = {
        serializedName: "ExtractedKeyValuePair",
        type: {
            name: "Composite",
            className: "ExtractedKeyValuePair",
            modelProperties: {
                key: {
                    serializedName: "key",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ExtractedToken"
                            }
                        }
                    }
                },
                value: {
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ExtractedToken"
                            }
                        }
                    }
                }
            }
        }
    };
    var ExtractedTableColumn = {
        serializedName: "ExtractedTableColumn",
        type: {
            name: "Composite",
            className: "ExtractedTableColumn",
            modelProperties: {
                header: {
                    serializedName: "header",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ExtractedToken"
                            }
                        }
                    }
                },
                entries: {
                    serializedName: "entries",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Sequence",
                                element: {
                                    type: {
                                        name: "Composite",
                                        className: "ExtractedToken"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    };
    var ExtractedTable = {
        serializedName: "ExtractedTable",
        type: {
            name: "Composite",
            className: "ExtractedTable",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                columns: {
                    serializedName: "columns",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ExtractedTableColumn"
                            }
                        }
                    }
                }
            }
        }
    };
    var ExtractedPage = {
        serializedName: "ExtractedPage",
        type: {
            name: "Composite",
            className: "ExtractedPage",
            modelProperties: {
                number: {
                    serializedName: "number",
                    type: {
                        name: "Number"
                    }
                },
                height: {
                    serializedName: "height",
                    type: {
                        name: "Number"
                    }
                },
                width: {
                    serializedName: "width",
                    type: {
                        name: "Number"
                    }
                },
                clusterId: {
                    serializedName: "clusterId",
                    type: {
                        name: "Number"
                    }
                },
                keyValuePairs: {
                    serializedName: "keyValuePairs",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ExtractedKeyValuePair"
                            }
                        }
                    }
                },
                tables: {
                    serializedName: "tables",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ExtractedTable"
                            }
                        }
                    }
                }
            }
        }
    };
    var AnalyzeResult = {
        serializedName: "AnalyzeResult",
        type: {
            name: "Composite",
            className: "AnalyzeResult",
            modelProperties: {
                status: {
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                },
                pages: {
                    serializedName: "pages",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ExtractedPage"
                            }
                        }
                    }
                },
                errors: {
                    serializedName: "errors",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "FormOperationError"
                            }
                        }
                    }
                }
            }
        }
    };
    var Word = {
        serializedName: "Word",
        type: {
            name: "Composite",
            className: "Word",
            modelProperties: {
                boundingBox: {
                    required: true,
                    serializedName: "boundingBox",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Number"
                            }
                        }
                    }
                },
                text: {
                    required: true,
                    serializedName: "text",
                    type: {
                        name: "String"
                    }
                },
                confidence: {
                    nullable: true,
                    serializedName: "confidence",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "High",
                            "Low"
                        ]
                    }
                }
            }
        }
    };
    var Line = {
        serializedName: "Line",
        type: {
            name: "Composite",
            className: "Line",
            modelProperties: {
                boundingBox: {
                    serializedName: "boundingBox",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Number"
                            }
                        }
                    }
                },
                text: {
                    serializedName: "text",
                    type: {
                        name: "String"
                    }
                },
                words: {
                    serializedName: "words",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Word"
                            }
                        }
                    }
                }
            }
        }
    };
    var TextRecognitionResult = {
        serializedName: "TextRecognitionResult",
        type: {
            name: "Composite",
            className: "TextRecognitionResult",
            modelProperties: {
                page: {
                    serializedName: "page",
                    type: {
                        name: "Number"
                    }
                },
                clockwiseOrientation: {
                    serializedName: "clockwiseOrientation",
                    type: {
                        name: "Number"
                    }
                },
                width: {
                    serializedName: "width",
                    type: {
                        name: "Number"
                    }
                },
                height: {
                    serializedName: "height",
                    type: {
                        name: "Number"
                    }
                },
                unit: {
                    nullable: true,
                    serializedName: "unit",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "pixel",
                            "inch"
                        ]
                    }
                },
                lines: {
                    required: true,
                    serializedName: "lines",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Line"
                            }
                        }
                    }
                }
            }
        }
    };
    var ElementReference = {
        serializedName: "elementReference",
        type: {
            name: "Composite",
            className: "ElementReference",
            modelProperties: {
                ref: {
                    serializedName: "$ref",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var FieldValue = {
        serializedName: "fieldValue",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "valueType",
                clientName: "valueType"
            },
            uberParent: "FieldValue",
            className: "FieldValue",
            modelProperties: {
                text: {
                    serializedName: "text",
                    type: {
                        name: "String"
                    }
                },
                elements: {
                    serializedName: "elements",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ElementReference"
                            }
                        }
                    }
                },
                valueType: {
                    required: true,
                    serializedName: "valueType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var UnderstandingResult = {
        serializedName: "understandingResult",
        type: {
            name: "Composite",
            className: "UnderstandingResult",
            modelProperties: {
                pages: {
                    serializedName: "pages",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Number"
                            }
                        }
                    }
                },
                fields: {
                    serializedName: "fields",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Composite",
                                className: "FieldValue"
                            }
                        }
                    }
                }
            }
        }
    };
    var ReadReceiptResult = {
        serializedName: "readReceiptResult",
        type: {
            name: "Composite",
            className: "ReadReceiptResult",
            modelProperties: {
                status: {
                    nullable: false,
                    serializedName: "status",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Not Started",
                            "Running",
                            "Failed",
                            "Succeeded"
                        ]
                    }
                },
                recognitionResults: {
                    serializedName: "recognitionResults",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "TextRecognitionResult"
                            }
                        }
                    }
                },
                understandingResults: {
                    serializedName: "understandingResults",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "UnderstandingResult"
                            }
                        }
                    }
                }
            }
        }
    };
    var StringValue = {
        serializedName: "stringValue",
        type: {
            name: "Composite",
            polymorphicDiscriminator: FieldValue.type.polymorphicDiscriminator,
            uberParent: "FieldValue",
            className: "StringValue",
            modelProperties: __assign(__assign({}, FieldValue.type.modelProperties), { value: {
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var NumberValue = {
        serializedName: "numberValue",
        type: {
            name: "Composite",
            polymorphicDiscriminator: FieldValue.type.polymorphicDiscriminator,
            uberParent: "FieldValue",
            className: "NumberValue",
            modelProperties: __assign(__assign({}, FieldValue.type.modelProperties), { value: {
                    serializedName: "value",
                    type: {
                        name: "Number"
                    }
                } })
        }
    };
    var ComputerVisionError = {
        serializedName: "ComputerVisionError",
        type: {
            name: "Composite",
            className: "ComputerVisionError",
            modelProperties: {
                code: {
                    required: true,
                    serializedName: "code",
                    type: {
                        name: "Object"
                    }
                },
                message: {
                    required: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                requestId: {
                    serializedName: "requestId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ImageUrl = {
        serializedName: "ImageUrl",
        type: {
            name: "Composite",
            className: "ImageUrl",
            modelProperties: {
                url: {
                    required: true,
                    serializedName: "url",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var BatchReadReceiptHeaders = {
        serializedName: "batchreadreceipt-headers",
        type: {
            name: "Composite",
            className: "BatchReadReceiptHeaders",
            modelProperties: {
                operationLocation: {
                    serializedName: "operation-location",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var BatchReadReceiptInStreamHeaders = {
        serializedName: "batchreadreceiptinstream-headers",
        type: {
            name: "Composite",
            className: "BatchReadReceiptInStreamHeaders",
            modelProperties: {
                operationLocation: {
                    serializedName: "operation-location",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var discriminators = {
        'fieldValue': FieldValue,
        'FieldValue.stringValue': StringValue,
        'FieldValue.numberValue': NumberValue
    };

    var Mappers = /*#__PURE__*/Object.freeze({
        __proto__: null,
        TrainSourceFilter: TrainSourceFilter,
        TrainRequest: TrainRequest,
        FormDocumentReport: FormDocumentReport,
        FormOperationError: FormOperationError,
        TrainResult: TrainResult,
        KeysResult: KeysResult,
        ModelResult: ModelResult,
        ModelsResult: ModelsResult,
        InnerError: InnerError,
        ErrorInformation: ErrorInformation,
        ErrorResponse: ErrorResponse,
        ExtractedToken: ExtractedToken,
        ExtractedKeyValuePair: ExtractedKeyValuePair,
        ExtractedTableColumn: ExtractedTableColumn,
        ExtractedTable: ExtractedTable,
        ExtractedPage: ExtractedPage,
        AnalyzeResult: AnalyzeResult,
        Word: Word,
        Line: Line,
        TextRecognitionResult: TextRecognitionResult,
        ElementReference: ElementReference,
        FieldValue: FieldValue,
        UnderstandingResult: UnderstandingResult,
        ReadReceiptResult: ReadReceiptResult,
        StringValue: StringValue,
        NumberValue: NumberValue,
        ComputerVisionError: ComputerVisionError,
        ImageUrl: ImageUrl,
        BatchReadReceiptHeaders: BatchReadReceiptHeaders,
        BatchReadReceiptInStreamHeaders: BatchReadReceiptInStreamHeaders,
        discriminators: discriminators
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var endpoint = {
        parameterPath: "endpoint",
        mapper: {
            required: true,
            serializedName: "Endpoint",
            defaultValue: '',
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var formStream = {
        parameterPath: "formStream",
        mapper: {
            required: true,
            serializedName: "form_stream",
            type: {
                name: "Stream"
            }
        }
    };
    var id = {
        parameterPath: "id",
        mapper: {
            required: true,
            serializedName: "id",
            type: {
                name: "Uuid"
            }
        }
    };
    var keys = {
        parameterPath: [
            "options",
            "keys"
        ],
        mapper: {
            serializedName: "keys",
            type: {
                name: "Sequence",
                element: {
                    type: {
                        name: "String"
                    }
                }
            }
        },
        collectionFormat: msRest.QueryCollectionFormat.Csv
    };
    var operationId = {
        parameterPath: "operationId",
        mapper: {
            required: true,
            serializedName: "operationId",
            type: {
                name: "String"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/cognitiveservices-formrecognizer";
    var packageVersion = "2.0.1";
    var FormRecognizerClientContext = /** @class */ (function (_super) {
        __extends(FormRecognizerClientContext, _super);
        /**
         * Initializes a new instance of the FormRecognizerClientContext class.
         * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:
         * https://westus2.api.cognitive.microsoft.com).
         * @param credentials Subscription credentials which uniquely identify client subscription.
         * @param [options] The parameter options
         */
        function FormRecognizerClientContext(credentials, endpoint, options) {
            var _this = this;
            if (endpoint == undefined) {
                throw new Error("'endpoint' cannot be null.");
            }
            if (credentials == undefined) {
                throw new Error("'credentials' cannot be null.");
            }
            if (!options) {
                options = {};
            }
            if (!options.userAgent) {
                var defaultUserAgent = msRest.getDefaultUserAgentValue();
                options.userAgent = packageName + "/" + packageVersion + " " + defaultUserAgent;
            }
            _this = _super.call(this, credentials, options) || this;
            _this.baseUri = "{Endpoint}/formrecognizer/v1.0-preview";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.endpoint = endpoint;
            _this.credentials = credentials;
            return _this;
        }
        return FormRecognizerClientContext;
    }(msRest.ServiceClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var FormRecognizerClient = /** @class */ (function (_super) {
        __extends(FormRecognizerClient, _super);
        /**
         * Initializes a new instance of the FormRecognizerClient class.
         * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:
         * https://westus2.api.cognitive.microsoft.com).
         * @param credentials Subscription credentials which uniquely identify client subscription.
         * @param [options] The parameter options
         */
        function FormRecognizerClient(credentials, endpoint, options) {
            return _super.call(this, credentials, endpoint, options) || this;
        }
        FormRecognizerClient.prototype.trainCustomModel = function (trainRequest, options, callback) {
            return this.sendOperationRequest({
                trainRequest: trainRequest,
                options: options
            }, trainCustomModelOperationSpec, callback);
        };
        FormRecognizerClient.prototype.getExtractedKeys = function (id, options, callback) {
            return this.sendOperationRequest({
                id: id,
                options: options
            }, getExtractedKeysOperationSpec, callback);
        };
        FormRecognizerClient.prototype.getCustomModels = function (options, callback) {
            return this.sendOperationRequest({
                options: options
            }, getCustomModelsOperationSpec, callback);
        };
        FormRecognizerClient.prototype.getCustomModel = function (id, options, callback) {
            return this.sendOperationRequest({
                id: id,
                options: options
            }, getCustomModelOperationSpec, callback);
        };
        FormRecognizerClient.prototype.deleteCustomModel = function (id, options, callback) {
            return this.sendOperationRequest({
                id: id,
                options: options
            }, deleteCustomModelOperationSpec, callback);
        };
        FormRecognizerClient.prototype.analyzeWithCustomModel = function (id, formStream, options, callback) {
            return this.sendOperationRequest({
                id: id,
                formStream: formStream,
                options: options
            }, analyzeWithCustomModelOperationSpec, callback);
        };
        FormRecognizerClient.prototype.batchReadReceipt = function (url, options, callback) {
            return this.sendOperationRequest({
                url: url,
                options: options
            }, batchReadReceiptOperationSpec, callback);
        };
        FormRecognizerClient.prototype.getReadReceiptResult = function (operationId, options, callback) {
            return this.sendOperationRequest({
                operationId: operationId,
                options: options
            }, getReadReceiptResultOperationSpec, callback);
        };
        FormRecognizerClient.prototype.batchReadReceiptInStream = function (image, options, callback) {
            return this.sendOperationRequest({
                image: image,
                options: options
            }, batchReadReceiptInStreamOperationSpec, callback);
        };
        return FormRecognizerClient;
    }(FormRecognizerClientContext));
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var trainCustomModelOperationSpec = {
        httpMethod: "POST",
        path: "custom/train",
        urlParameters: [
            endpoint
        ],
        requestBody: {
            parameterPath: "trainRequest",
            mapper: __assign(__assign({}, TrainRequest), { required: true })
        },
        responses: {
            200: {
                bodyMapper: TrainResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var getExtractedKeysOperationSpec = {
        httpMethod: "GET",
        path: "custom/models/{id}/keys",
        urlParameters: [
            endpoint,
            id
        ],
        responses: {
            200: {
                bodyMapper: KeysResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var getCustomModelsOperationSpec = {
        httpMethod: "GET",
        path: "custom/models",
        urlParameters: [
            endpoint
        ],
        responses: {
            200: {
                bodyMapper: ModelsResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var getCustomModelOperationSpec = {
        httpMethod: "GET",
        path: "custom/models/{id}",
        urlParameters: [
            endpoint,
            id
        ],
        responses: {
            200: {
                bodyMapper: ModelResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var deleteCustomModelOperationSpec = {
        httpMethod: "DELETE",
        path: "custom/models/{id}",
        urlParameters: [
            endpoint,
            id
        ],
        responses: {
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var analyzeWithCustomModelOperationSpec = {
        httpMethod: "POST",
        path: "custom/models/{id}/analyze",
        urlParameters: [
            endpoint,
            id
        ],
        queryParameters: [
            keys
        ],
        formDataParameters: [
            formStream
        ],
        contentType: "multipart/form-data",
        responses: {
            200: {
                bodyMapper: AnalyzeResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var batchReadReceiptOperationSpec = {
        httpMethod: "POST",
        path: "prebuilt/receipt/asyncBatchAnalyze",
        urlParameters: [
            endpoint
        ],
        requestBody: {
            parameterPath: {
                url: "url"
            },
            mapper: __assign(__assign({}, ImageUrl), { required: true })
        },
        responses: {
            202: {
                headersMapper: BatchReadReceiptHeaders
            },
            default: {
                bodyMapper: ComputerVisionError
            }
        },
        serializer: serializer
    };
    var getReadReceiptResultOperationSpec = {
        httpMethod: "GET",
        path: "prebuilt/receipt/operations/{operationId}",
        urlParameters: [
            endpoint,
            operationId
        ],
        responses: {
            200: {
                bodyMapper: ReadReceiptResult
            },
            default: {
                bodyMapper: ComputerVisionError
            }
        },
        serializer: serializer
    };
    var batchReadReceiptInStreamOperationSpec = {
        httpMethod: "POST",
        path: "prebuilt/receipt/asyncBatchAnalyze",
        urlParameters: [
            endpoint
        ],
        requestBody: {
            parameterPath: "image",
            mapper: {
                required: true,
                serializedName: "Image",
                type: {
                    name: "Stream"
                }
            }
        },
        contentType: "application/octet-stream",
        responses: {
            202: {
                headersMapper: BatchReadReceiptInStreamHeaders
            },
            default: {
                bodyMapper: ComputerVisionError
            }
        },
        serializer: serializer
    };

    exports.FormRecognizerClient = FormRecognizerClient;
    exports.FormRecognizerClientContext = FormRecognizerClientContext;
    exports.FormRecognizerMappers = Mappers;
    exports.FormRecognizerModels = index;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=cognitiveservices-formrecognizer.js.map
