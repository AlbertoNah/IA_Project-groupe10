{"version":3,"file":"cognitiveservices-formrecognizer.js","sources":["../node_modules/tslib/tslib.es6.js","../src/models/index.ts","../src/models/mappers.ts","../src/models/parameters.ts","../src/formRecognizerClientContext.ts","../src/formRecognizerClient.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\n\nimport * as msRest from \"@azure/ms-rest-js\";\n\n/**\n * Filters to be applied when traversing a data source.\n */\nexport interface TrainSourceFilter {\n  /**\n   * A case-sensitive prefix string to filter content\n   * under the source location. For e.g., when using a Azure Blob\n   * Uri use the prefix to restrict subfolders for content.\n   */\n  prefix?: string;\n  /**\n   * A flag to indicate if sub folders within the set of\n   * prefix folders will also need to be included when searching\n   * for content to be preprocessed.\n   */\n  includeSubFolders?: boolean;\n}\n\n/**\n * Contract to initiate a train request.\n */\nexport interface TrainRequest {\n  /**\n   * Get or set source path.\n   */\n  source: string;\n  /**\n   * Get or set filter to further search the\n   * source path for content.\n   */\n  sourceFilter?: TrainSourceFilter;\n}\n\n/**\n * An interface representing FormDocumentReport.\n */\nexport interface FormDocumentReport {\n  /**\n   * Reference to the data that the report is for.\n   */\n  documentName?: string;\n  /**\n   * Total number of pages trained on.\n   */\n  pages?: number;\n  /**\n   * List of errors per page.\n   */\n  errors?: string[];\n  /**\n   * Status of the training operation. Possible values include: 'success', 'partialSuccess',\n   * 'failure'\n   */\n  status?: Status;\n}\n\n/**\n * Error reported during an operation.\n */\nexport interface FormOperationError {\n  /**\n   * Message reported during the train operation.\n   */\n  errorMessage?: string;\n}\n\n/**\n * Response of the Train API call.\n */\nexport interface TrainResult {\n  /**\n   * Identifier of the model.\n   */\n  modelId?: string;\n  /**\n   * List of documents used to train the model and the\n   * train operation error reported by each.\n   */\n  trainingDocuments?: FormDocumentReport[];\n  /**\n   * Errors returned during the training operation.\n   */\n  errors?: FormOperationError[];\n}\n\n/**\n * Result of an operation to get\n * the keys extracted by a model.\n */\nexport interface KeysResult {\n  /**\n   * Object mapping ClusterIds to Key lists.\n   */\n  clusters?: { [propertyName: string]: string[] };\n}\n\n/**\n * Result of a model status query operation.\n */\nexport interface ModelResult {\n  /**\n   * Get or set model identifier.\n   */\n  modelId?: string;\n  /**\n   * Get or set the status of model. Possible values include: 'created', 'ready', 'invalid'\n   */\n  status?: Status1;\n  /**\n   * Get or set the created date time of the model.\n   */\n  createdDateTime?: Date;\n  /**\n   * Get or set the model last updated datetime.\n   */\n  lastUpdatedDateTime?: Date;\n}\n\n/**\n * Result of query operation to fetch multiple models.\n */\nexport interface ModelsResult {\n  /**\n   * Collection of models.\n   */\n  modelsProperty?: ModelResult[];\n}\n\n/**\n * An interface representing InnerError.\n */\nexport interface InnerError {\n  requestId?: string;\n}\n\n/**\n * An interface representing ErrorInformation.\n */\nexport interface ErrorInformation {\n  code?: string;\n  innerError?: InnerError;\n  message?: string;\n}\n\n/**\n * An interface representing ErrorResponse.\n */\nexport interface ErrorResponse {\n  error?: ErrorInformation;\n}\n\n/**\n * Canonical representation of single extracted text.\n */\nexport interface ExtractedToken {\n  /**\n   * String value of the extracted text.\n   */\n  text?: string;\n  /**\n   * Bounding box of the extracted text. Represents the\n   * location of the extracted text as a pair of\n   * cartesian co-ordinates. The co-ordinate pairs are arranged by\n   * top-left, top-right, bottom-right and bottom-left endpoints box\n   * with origin reference from the bottom-left of the page.\n   */\n  boundingBox?: number[];\n  /**\n   * A measure of accuracy of the extracted text.\n   */\n  confidence?: number;\n}\n\n/**\n * Representation of a key-value pair as a list\n * of key and value tokens.\n */\nexport interface ExtractedKeyValuePair {\n  /**\n   * List of tokens for the extracted key in a key-value pair.\n   */\n  key?: ExtractedToken[];\n  /**\n   * List of tokens for the extracted value in a key-value pair.\n   */\n  value?: ExtractedToken[];\n}\n\n/**\n * Extraction information of a column in\n * a table.\n */\nexport interface ExtractedTableColumn {\n  /**\n   * List of extracted tokens for the column header.\n   */\n  header?: ExtractedToken[];\n  /**\n   * Extracted text for each cell of a column. Each cell\n   * in the column can have a list of one or more tokens.\n   */\n  entries?: ExtractedToken[][];\n}\n\n/**\n * Extraction information about a table\n * contained in a page.\n */\nexport interface ExtractedTable {\n  /**\n   * Table identifier.\n   */\n  id?: string;\n  /**\n   * List of columns contained in the table.\n   */\n  columns?: ExtractedTableColumn[];\n}\n\n/**\n * Extraction information of a single page in a\n * with a document.\n */\nexport interface ExtractedPage {\n  /**\n   * Page number.\n   */\n  number?: number;\n  /**\n   * Height of the page (in pixels).\n   */\n  height?: number;\n  /**\n   * Width of the page (in pixels).\n   */\n  width?: number;\n  /**\n   * Cluster identifier.\n   */\n  clusterId?: number;\n  /**\n   * List of Key-Value pairs extracted from the page.\n   */\n  keyValuePairs?: ExtractedKeyValuePair[];\n  /**\n   * List of Tables and their information extracted from the page.\n   */\n  tables?: ExtractedTable[];\n}\n\n/**\n * Analyze API call result.\n */\nexport interface AnalyzeResult {\n  /**\n   * Status of the analyze operation. Possible values include: 'success', 'partialSuccess',\n   * 'failure'\n   */\n  status?: Status2;\n  /**\n   * Page level information extracted in the analyzed\n   * document.\n   */\n  pages?: ExtractedPage[];\n  /**\n   * List of errors reported during the analyze\n   * operation.\n   */\n  errors?: FormOperationError[];\n}\n\n/**\n * An object representing a recognized word.\n */\nexport interface Word {\n  /**\n   * Bounding box of a recognized word.\n   */\n  boundingBox: number[];\n  /**\n   * The text content of the word.\n   */\n  text: string;\n  /**\n   * Qualitative confidence measure. Possible values include: 'High', 'Low'\n   */\n  confidence?: TextRecognitionResultConfidenceClass;\n}\n\n/**\n * An object representing a recognized text line.\n */\nexport interface Line {\n  /**\n   * Bounding box of a recognized line.\n   */\n  boundingBox?: number[];\n  /**\n   * The text content of the line.\n   */\n  text?: string;\n  /**\n   * List of words in the text line.\n   */\n  words?: Word[];\n}\n\n/**\n * An object representing a recognized text region\n */\nexport interface TextRecognitionResult {\n  /**\n   * The 1-based page number of the recognition result.\n   */\n  page?: number;\n  /**\n   * The orientation of the image in degrees in the clockwise direction. Range between [0, 360).\n   */\n  clockwiseOrientation?: number;\n  /**\n   * The width of the image in pixels or the PDF in inches.\n   */\n  width?: number;\n  /**\n   * The height of the image in pixels or the PDF in inches.\n   */\n  height?: number;\n  /**\n   * The unit used in the Width, Height and BoundingBox. For images, the unit is 'pixel'. For PDF,\n   * the unit is 'inch'. Possible values include: 'pixel', 'inch'\n   */\n  unit?: TextRecognitionResultDimensionUnit;\n  /**\n   * A list of recognized text lines.\n   */\n  lines: Line[];\n}\n\n/**\n * Reference to an OCR word.\n */\nexport interface ElementReference {\n  ref?: string;\n}\n\n/**\n * Contains the possible cases for FieldValue.\n */\nexport type FieldValueUnion = FieldValue | StringValue | NumberValue;\n\n/**\n * Base class representing a recognized field value.\n */\nexport interface FieldValue {\n  /**\n   * Polymorphic Discriminator\n   */\n  valueType: \"fieldValue\";\n  /**\n   * OCR text content of the recognized field.\n   */\n  text?: string;\n  /**\n   * List of references to OCR words comprising the recognized field value.\n   */\n  elements?: ElementReference[];\n}\n\n/**\n * A set of extracted fields corresponding to a semantic object, such as a receipt, in the input\n * document.\n */\nexport interface UnderstandingResult {\n  /**\n   * List of pages where the document is found.\n   */\n  pages?: number[];\n  /**\n   * Dictionary of recognized field values.\n   */\n  fields?: { [propertyName: string]: FieldValueUnion };\n}\n\n/**\n * Analysis result of the 'Batch Read Receipt' operation.\n */\nexport interface ReadReceiptResult {\n  /**\n   * Status of the read operation. Possible values include: 'Not Started', 'Running', 'Failed',\n   * 'Succeeded'\n   */\n  status?: TextOperationStatusCodes;\n  /**\n   * Text recognition result of the 'Batch Read Receipt' operation.\n   */\n  recognitionResults?: TextRecognitionResult[];\n  /**\n   * Semantic understanding result of the 'Batch Read Receipt' operation.\n   */\n  understandingResults?: UnderstandingResult[];\n}\n\n/**\n * Recognized string field value.\n */\nexport interface StringValue {\n  /**\n   * Polymorphic Discriminator\n   */\n  valueType: \"stringValue\";\n  /**\n   * OCR text content of the recognized field.\n   */\n  text?: string;\n  /**\n   * List of references to OCR words comprising the recognized field value.\n   */\n  elements?: ElementReference[];\n  /**\n   * String value of the recognized field.\n   */\n  value?: string;\n}\n\n/**\n * Recognized numeric field value.\n */\nexport interface NumberValue {\n  /**\n   * Polymorphic Discriminator\n   */\n  valueType: \"numberValue\";\n  /**\n   * OCR text content of the recognized field.\n   */\n  text?: string;\n  /**\n   * List of references to OCR words comprising the recognized field value.\n   */\n  elements?: ElementReference[];\n  /**\n   * Numeric value of the recognized field.\n   */\n  value?: number;\n}\n\n/**\n * Details about the API request error.\n */\nexport interface ComputerVisionError {\n  /**\n   * The error code.\n   */\n  code: any;\n  /**\n   * A message explaining the error reported by the service.\n   */\n  message: string;\n  /**\n   * A unique request identifier.\n   */\n  requestId?: string;\n}\n\n/**\n * An interface representing ImageUrl.\n */\nexport interface ImageUrl {\n  /**\n   * Publicly reachable URL of an image.\n   */\n  url: string;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface FormRecognizerClientAnalyzeWithCustomModelOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * An optional list of known keys to extract the values for.\n   */\n  keys?: string[];\n}\n\n/**\n * Defines headers for BatchReadReceipt operation.\n */\nexport interface BatchReadReceiptHeaders {\n  /**\n   * URL to query for status of the operation. The URL will expire in 48 hours.\n   */\n  operationLocation: string;\n}\n\n/**\n * Defines headers for BatchReadReceiptInStream operation.\n */\nexport interface BatchReadReceiptInStreamHeaders {\n  /**\n   * URL to query for status of the operation. The URL will expire in 48 hours.\n   */\n  operationLocation: string;\n}\n\n/**\n * Defines values for TextOperationStatusCodes.\n * Possible values include: 'Not Started', 'Running', 'Failed', 'Succeeded'\n * @readonly\n * @enum {string}\n */\nexport type TextOperationStatusCodes = 'Not Started' | 'Running' | 'Failed' | 'Succeeded';\n\n/**\n * Defines values for TextRecognitionResultDimensionUnit.\n * Possible values include: 'pixel', 'inch'\n * @readonly\n * @enum {string}\n */\nexport type TextRecognitionResultDimensionUnit = 'pixel' | 'inch';\n\n/**\n * Defines values for TextRecognitionResultConfidenceClass.\n * Possible values include: 'High', 'Low'\n * @readonly\n * @enum {string}\n */\nexport type TextRecognitionResultConfidenceClass = 'High' | 'Low';\n\n/**\n * Defines values for Status.\n * Possible values include: 'success', 'partialSuccess', 'failure'\n * @readonly\n * @enum {string}\n */\nexport type Status = 'success' | 'partialSuccess' | 'failure';\n\n/**\n * Defines values for Status1.\n * Possible values include: 'created', 'ready', 'invalid'\n * @readonly\n * @enum {string}\n */\nexport type Status1 = 'created' | 'ready' | 'invalid';\n\n/**\n * Defines values for Status2.\n * Possible values include: 'success', 'partialSuccess', 'failure'\n * @readonly\n * @enum {string}\n */\nexport type Status2 = 'success' | 'partialSuccess' | 'failure';\n\n/**\n * Contains response data for the trainCustomModel operation.\n */\nexport type TrainCustomModelResponse = TrainResult & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: TrainResult;\n    };\n};\n\n/**\n * Contains response data for the getExtractedKeys operation.\n */\nexport type GetExtractedKeysResponse = KeysResult & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: KeysResult;\n    };\n};\n\n/**\n * Contains response data for the getCustomModels operation.\n */\nexport type GetCustomModelsResponse = ModelsResult & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: ModelsResult;\n    };\n};\n\n/**\n * Contains response data for the getCustomModel operation.\n */\nexport type GetCustomModelResponse = ModelResult & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: ModelResult;\n    };\n};\n\n/**\n * Contains response data for the analyzeWithCustomModel operation.\n */\nexport type AnalyzeWithCustomModelResponse = AnalyzeResult & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: AnalyzeResult;\n    };\n};\n\n/**\n * Contains response data for the batchReadReceipt operation.\n */\nexport type BatchReadReceiptResponse = BatchReadReceiptHeaders & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The parsed HTTP response headers.\n       */\n      parsedHeaders: BatchReadReceiptHeaders;\n    };\n};\n\n/**\n * Contains response data for the getReadReceiptResult operation.\n */\nexport type GetReadReceiptResultResponse = ReadReceiptResult & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: ReadReceiptResult;\n    };\n};\n\n/**\n * Contains response data for the batchReadReceiptInStream operation.\n */\nexport type BatchReadReceiptInStreamResponse = BatchReadReceiptInStreamHeaders & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The parsed HTTP response headers.\n       */\n      parsedHeaders: BatchReadReceiptInStreamHeaders;\n    };\n};\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as msRest from \"@azure/ms-rest-js\";\n\n\nexport const TrainSourceFilter: msRest.CompositeMapper = {\n  serializedName: \"TrainSourceFilter\",\n  type: {\n    name: \"Composite\",\n    className: \"TrainSourceFilter\",\n    modelProperties: {\n      prefix: {\n        serializedName: \"prefix\",\n        constraints: {\n          MaxLength: 128,\n          MinLength: 0\n        },\n        type: {\n          name: \"String\"\n        }\n      },\n      includeSubFolders: {\n        serializedName: \"includeSubFolders\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const TrainRequest: msRest.CompositeMapper = {\n  serializedName: \"TrainRequest\",\n  type: {\n    name: \"Composite\",\n    className: \"TrainRequest\",\n    modelProperties: {\n      source: {\n        required: true,\n        serializedName: \"source\",\n        constraints: {\n          MaxLength: 2048,\n          MinLength: 0\n        },\n        type: {\n          name: \"String\"\n        }\n      },\n      sourceFilter: {\n        serializedName: \"sourceFilter\",\n        type: {\n          name: \"Composite\",\n          className: \"TrainSourceFilter\"\n        }\n      }\n    }\n  }\n};\n\nexport const FormDocumentReport: msRest.CompositeMapper = {\n  serializedName: \"FormDocumentReport\",\n  type: {\n    name: \"Composite\",\n    className: \"FormDocumentReport\",\n    modelProperties: {\n      documentName: {\n        serializedName: \"documentName\",\n        type: {\n          name: \"String\"\n        }\n      },\n      pages: {\n        serializedName: \"pages\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      errors: {\n        serializedName: \"errors\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      status: {\n        serializedName: \"status\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const FormOperationError: msRest.CompositeMapper = {\n  serializedName: \"FormOperationError\",\n  type: {\n    name: \"Composite\",\n    className: \"FormOperationError\",\n    modelProperties: {\n      errorMessage: {\n        serializedName: \"errorMessage\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const TrainResult: msRest.CompositeMapper = {\n  serializedName: \"TrainResult\",\n  type: {\n    name: \"Composite\",\n    className: \"TrainResult\",\n    modelProperties: {\n      modelId: {\n        nullable: false,\n        serializedName: \"modelId\",\n        type: {\n          name: \"Uuid\"\n        }\n      },\n      trainingDocuments: {\n        serializedName: \"trainingDocuments\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"FormDocumentReport\"\n            }\n          }\n        }\n      },\n      errors: {\n        serializedName: \"errors\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"FormOperationError\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const KeysResult: msRest.CompositeMapper = {\n  serializedName: \"KeysResult\",\n  type: {\n    name: \"Composite\",\n    className: \"KeysResult\",\n    modelProperties: {\n      clusters: {\n        serializedName: \"clusters\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"Sequence\",\n              element: {\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const ModelResult: msRest.CompositeMapper = {\n  serializedName: \"ModelResult\",\n  type: {\n    name: \"Composite\",\n    className: \"ModelResult\",\n    modelProperties: {\n      modelId: {\n        nullable: false,\n        serializedName: \"modelId\",\n        type: {\n          name: \"Uuid\"\n        }\n      },\n      status: {\n        serializedName: \"status\",\n        type: {\n          name: \"String\"\n        }\n      },\n      createdDateTime: {\n        serializedName: \"createdDateTime\",\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      lastUpdatedDateTime: {\n        serializedName: \"lastUpdatedDateTime\",\n        type: {\n          name: \"DateTime\"\n        }\n      }\n    }\n  }\n};\n\nexport const ModelsResult: msRest.CompositeMapper = {\n  serializedName: \"ModelsResult\",\n  type: {\n    name: \"Composite\",\n    className: \"ModelsResult\",\n    modelProperties: {\n      modelsProperty: {\n        serializedName: \"models\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"ModelResult\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const InnerError: msRest.CompositeMapper = {\n  serializedName: \"InnerError\",\n  type: {\n    name: \"Composite\",\n    className: \"InnerError\",\n    modelProperties: {\n      requestId: {\n        serializedName: \"requestId\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ErrorInformation: msRest.CompositeMapper = {\n  serializedName: \"ErrorInformation\",\n  type: {\n    name: \"Composite\",\n    className: \"ErrorInformation\",\n    modelProperties: {\n      code: {\n        serializedName: \"code\",\n        type: {\n          name: \"String\"\n        }\n      },\n      innerError: {\n        serializedName: \"innerError\",\n        type: {\n          name: \"Composite\",\n          className: \"InnerError\"\n        }\n      },\n      message: {\n        serializedName: \"message\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ErrorResponse: msRest.CompositeMapper = {\n  serializedName: \"ErrorResponse\",\n  type: {\n    name: \"Composite\",\n    className: \"ErrorResponse\",\n    modelProperties: {\n      error: {\n        serializedName: \"error\",\n        type: {\n          name: \"Composite\",\n          className: \"ErrorInformation\"\n        }\n      }\n    }\n  }\n};\n\nexport const ExtractedToken: msRest.CompositeMapper = {\n  serializedName: \"ExtractedToken\",\n  type: {\n    name: \"Composite\",\n    className: \"ExtractedToken\",\n    modelProperties: {\n      text: {\n        serializedName: \"text\",\n        type: {\n          name: \"String\"\n        }\n      },\n      boundingBox: {\n        serializedName: \"boundingBox\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Number\"\n            }\n          }\n        }\n      },\n      confidence: {\n        serializedName: \"confidence\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const ExtractedKeyValuePair: msRest.CompositeMapper = {\n  serializedName: \"ExtractedKeyValuePair\",\n  type: {\n    name: \"Composite\",\n    className: \"ExtractedKeyValuePair\",\n    modelProperties: {\n      key: {\n        serializedName: \"key\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"ExtractedToken\"\n            }\n          }\n        }\n      },\n      value: {\n        serializedName: \"value\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"ExtractedToken\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const ExtractedTableColumn: msRest.CompositeMapper = {\n  serializedName: \"ExtractedTableColumn\",\n  type: {\n    name: \"Composite\",\n    className: \"ExtractedTableColumn\",\n    modelProperties: {\n      header: {\n        serializedName: \"header\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"ExtractedToken\"\n            }\n          }\n        }\n      },\n      entries: {\n        serializedName: \"entries\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Sequence\",\n              element: {\n                type: {\n                  name: \"Composite\",\n                  className: \"ExtractedToken\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const ExtractedTable: msRest.CompositeMapper = {\n  serializedName: \"ExtractedTable\",\n  type: {\n    name: \"Composite\",\n    className: \"ExtractedTable\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      columns: {\n        serializedName: \"columns\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"ExtractedTableColumn\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const ExtractedPage: msRest.CompositeMapper = {\n  serializedName: \"ExtractedPage\",\n  type: {\n    name: \"Composite\",\n    className: \"ExtractedPage\",\n    modelProperties: {\n      number: {\n        serializedName: \"number\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      height: {\n        serializedName: \"height\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      width: {\n        serializedName: \"width\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      clusterId: {\n        serializedName: \"clusterId\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      keyValuePairs: {\n        serializedName: \"keyValuePairs\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"ExtractedKeyValuePair\"\n            }\n          }\n        }\n      },\n      tables: {\n        serializedName: \"tables\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"ExtractedTable\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const AnalyzeResult: msRest.CompositeMapper = {\n  serializedName: \"AnalyzeResult\",\n  type: {\n    name: \"Composite\",\n    className: \"AnalyzeResult\",\n    modelProperties: {\n      status: {\n        serializedName: \"status\",\n        type: {\n          name: \"String\"\n        }\n      },\n      pages: {\n        serializedName: \"pages\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"ExtractedPage\"\n            }\n          }\n        }\n      },\n      errors: {\n        serializedName: \"errors\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"FormOperationError\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const Word: msRest.CompositeMapper = {\n  serializedName: \"Word\",\n  type: {\n    name: \"Composite\",\n    className: \"Word\",\n    modelProperties: {\n      boundingBox: {\n        required: true,\n        serializedName: \"boundingBox\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Number\"\n            }\n          }\n        }\n      },\n      text: {\n        required: true,\n        serializedName: \"text\",\n        type: {\n          name: \"String\"\n        }\n      },\n      confidence: {\n        nullable: true,\n        serializedName: \"confidence\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"High\",\n            \"Low\"\n          ]\n        }\n      }\n    }\n  }\n};\n\nexport const Line: msRest.CompositeMapper = {\n  serializedName: \"Line\",\n  type: {\n    name: \"Composite\",\n    className: \"Line\",\n    modelProperties: {\n      boundingBox: {\n        serializedName: \"boundingBox\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Number\"\n            }\n          }\n        }\n      },\n      text: {\n        serializedName: \"text\",\n        type: {\n          name: \"String\"\n        }\n      },\n      words: {\n        serializedName: \"words\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Word\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const TextRecognitionResult: msRest.CompositeMapper = {\n  serializedName: \"TextRecognitionResult\",\n  type: {\n    name: \"Composite\",\n    className: \"TextRecognitionResult\",\n    modelProperties: {\n      page: {\n        serializedName: \"page\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      clockwiseOrientation: {\n        serializedName: \"clockwiseOrientation\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      width: {\n        serializedName: \"width\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      height: {\n        serializedName: \"height\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      unit: {\n        nullable: true,\n        serializedName: \"unit\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"pixel\",\n            \"inch\"\n          ]\n        }\n      },\n      lines: {\n        required: true,\n        serializedName: \"lines\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Line\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const ElementReference: msRest.CompositeMapper = {\n  serializedName: \"elementReference\",\n  type: {\n    name: \"Composite\",\n    className: \"ElementReference\",\n    modelProperties: {\n      ref: {\n        serializedName: \"$ref\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const FieldValue: msRest.CompositeMapper = {\n  serializedName: \"fieldValue\",\n  type: {\n    name: \"Composite\",\n    polymorphicDiscriminator: {\n      serializedName: \"valueType\",\n      clientName: \"valueType\"\n    },\n    uberParent: \"FieldValue\",\n    className: \"FieldValue\",\n    modelProperties: {\n      text: {\n        serializedName: \"text\",\n        type: {\n          name: \"String\"\n        }\n      },\n      elements: {\n        serializedName: \"elements\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"ElementReference\"\n            }\n          }\n        }\n      },\n      valueType: {\n        required: true,\n        serializedName: \"valueType\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const UnderstandingResult: msRest.CompositeMapper = {\n  serializedName: \"understandingResult\",\n  type: {\n    name: \"Composite\",\n    className: \"UnderstandingResult\",\n    modelProperties: {\n      pages: {\n        serializedName: \"pages\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Number\"\n            }\n          }\n        }\n      },\n      fields: {\n        serializedName: \"fields\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"Composite\",\n              className: \"FieldValue\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const ReadReceiptResult: msRest.CompositeMapper = {\n  serializedName: \"readReceiptResult\",\n  type: {\n    name: \"Composite\",\n    className: \"ReadReceiptResult\",\n    modelProperties: {\n      status: {\n        nullable: false,\n        serializedName: \"status\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"Not Started\",\n            \"Running\",\n            \"Failed\",\n            \"Succeeded\"\n          ]\n        }\n      },\n      recognitionResults: {\n        serializedName: \"recognitionResults\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"TextRecognitionResult\"\n            }\n          }\n        }\n      },\n      understandingResults: {\n        serializedName: \"understandingResults\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"UnderstandingResult\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const StringValue: msRest.CompositeMapper = {\n  serializedName: \"stringValue\",\n  type: {\n    name: \"Composite\",\n    polymorphicDiscriminator: FieldValue.type.polymorphicDiscriminator,\n    uberParent: \"FieldValue\",\n    className: \"StringValue\",\n    modelProperties: {\n      ...FieldValue.type.modelProperties,\n      value: {\n        serializedName: \"value\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const NumberValue: msRest.CompositeMapper = {\n  serializedName: \"numberValue\",\n  type: {\n    name: \"Composite\",\n    polymorphicDiscriminator: FieldValue.type.polymorphicDiscriminator,\n    uberParent: \"FieldValue\",\n    className: \"NumberValue\",\n    modelProperties: {\n      ...FieldValue.type.modelProperties,\n      value: {\n        serializedName: \"value\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const ComputerVisionError: msRest.CompositeMapper = {\n  serializedName: \"ComputerVisionError\",\n  type: {\n    name: \"Composite\",\n    className: \"ComputerVisionError\",\n    modelProperties: {\n      code: {\n        required: true,\n        serializedName: \"code\",\n        type: {\n          name: \"Object\"\n        }\n      },\n      message: {\n        required: true,\n        serializedName: \"message\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"requestId\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ImageUrl: msRest.CompositeMapper = {\n  serializedName: \"ImageUrl\",\n  type: {\n    name: \"Composite\",\n    className: \"ImageUrl\",\n    modelProperties: {\n      url: {\n        required: true,\n        serializedName: \"url\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BatchReadReceiptHeaders: msRest.CompositeMapper = {\n  serializedName: \"batchreadreceipt-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"BatchReadReceiptHeaders\",\n    modelProperties: {\n      operationLocation: {\n        serializedName: \"operation-location\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BatchReadReceiptInStreamHeaders: msRest.CompositeMapper = {\n  serializedName: \"batchreadreceiptinstream-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"BatchReadReceiptInStreamHeaders\",\n    modelProperties: {\n      operationLocation: {\n        serializedName: \"operation-location\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const discriminators = {\n  'fieldValue' : FieldValue,\n  'FieldValue.stringValue' : StringValue,\n  'FieldValue.numberValue' : NumberValue\n\n};\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as msRest from \"@azure/ms-rest-js\";\n\nexport const endpoint: msRest.OperationURLParameter = {\n  parameterPath: \"endpoint\",\n  mapper: {\n    required: true,\n    serializedName: \"Endpoint\",\n    defaultValue: '',\n    type: {\n      name: \"String\"\n    }\n  },\n  skipEncoding: true\n};\nexport const formStream: msRest.OperationParameter = {\n  parameterPath: \"formStream\",\n  mapper: {\n    required: true,\n    serializedName: \"form_stream\",\n    type: {\n      name: \"Stream\"\n    }\n  }\n};\nexport const id: msRest.OperationURLParameter = {\n  parameterPath: \"id\",\n  mapper: {\n    required: true,\n    serializedName: \"id\",\n    type: {\n      name: \"Uuid\"\n    }\n  }\n};\nexport const keys: msRest.OperationQueryParameter = {\n  parameterPath: [\n    \"options\",\n    \"keys\"\n  ],\n  mapper: {\n    serializedName: \"keys\",\n    type: {\n      name: \"Sequence\",\n      element: {\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  },\n  collectionFormat: msRest.QueryCollectionFormat.Csv\n};\nexport const operationId: msRest.OperationURLParameter = {\n  parameterPath: \"operationId\",\n  mapper: {\n    required: true,\n    serializedName: \"operationId\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as msRest from \"@azure/ms-rest-js\";\n\nconst packageName = \"@azure/cognitiveservices-formrecognizer\";\nconst packageVersion = \"2.0.1\";\n\nexport class FormRecognizerClientContext extends msRest.ServiceClient {\n  endpoint: string;\n  credentials: msRest.ServiceClientCredentials;\n\n  /**\n   * Initializes a new instance of the FormRecognizerClientContext class.\n   * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:\n   * https://westus2.api.cognitive.microsoft.com).\n   * @param credentials Subscription credentials which uniquely identify client subscription.\n   * @param [options] The parameter options\n   */\n  constructor(credentials: msRest.ServiceClientCredentials, endpoint: string, options?: msRest.ServiceClientOptions) {\n    if (endpoint == undefined) {\n      throw new Error(\"'endpoint' cannot be null.\");\n    }\n    if (credentials == undefined) {\n      throw new Error(\"'credentials' cannot be null.\");\n    }\n\n    if (!options) {\n      options = {};\n    }\n\n    if (!options.userAgent) {\n      const defaultUserAgent = msRest.getDefaultUserAgentValue();\n      options.userAgent = `${packageName}/${packageVersion} ${defaultUserAgent}`;\n    }\n\n    super(credentials, options);\n\n    this.baseUri = \"{Endpoint}/formrecognizer/v1.0-preview\";\n    this.requestContentType = \"application/json; charset=utf-8\";\n    this.endpoint = endpoint;\n    this.credentials = credentials;\n  }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as msRest from \"@azure/ms-rest-js\";\nimport * as Models from \"./models\";\nimport * as Mappers from \"./models/mappers\";\nimport * as Parameters from \"./models/parameters\";\nimport { FormRecognizerClientContext } from \"./formRecognizerClientContext\";\n\nclass FormRecognizerClient extends FormRecognizerClientContext {\n  /**\n   * Initializes a new instance of the FormRecognizerClient class.\n   * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:\n   * https://westus2.api.cognitive.microsoft.com).\n   * @param credentials Subscription credentials which uniquely identify client subscription.\n   * @param [options] The parameter options\n   */\n  constructor(credentials: msRest.ServiceClientCredentials, endpoint: string, options?: msRest.ServiceClientOptions) {\n    super(credentials, endpoint, options);\n  }\n\n  /**\n   * Create and train a custom model. The train request must include a source parameter that is\n   * either an externally accessible Azure Storage blob container Uri (preferably a Shared Access\n   * Signature Uri) or valid path to a data folder in a locally mounted drive. When local paths are\n   * specified, they must follow the Linux/Unix path format and be an absolute path rooted to the\n   * input mount configuration\n   * setting value e.g., if '{Mounts:Input}' configuration setting value is '/input' then a valid\n   * source path would be '/input/contosodataset'. All data to be trained is expected to be directly\n   * under the source folder. Subfolders are not supported. Models are trained using documents that\n   * are of the following content type - 'application/pdf', 'image/jpeg' and 'image/png'.\"\n   * Other type of content is ignored.\n   * @summary Train Model\n   * @param trainRequest Request object for training.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.TrainCustomModelResponse>\n   */\n  trainCustomModel(trainRequest: Models.TrainRequest, options?: msRest.RequestOptionsBase): Promise<Models.TrainCustomModelResponse>;\n  /**\n   * @param trainRequest Request object for training.\n   * @param callback The callback\n   */\n  trainCustomModel(trainRequest: Models.TrainRequest, callback: msRest.ServiceCallback<Models.TrainResult>): void;\n  /**\n   * @param trainRequest Request object for training.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  trainCustomModel(trainRequest: Models.TrainRequest, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TrainResult>): void;\n  trainCustomModel(trainRequest: Models.TrainRequest, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.TrainResult>, callback?: msRest.ServiceCallback<Models.TrainResult>): Promise<Models.TrainCustomModelResponse> {\n    return this.sendOperationRequest(\n      {\n        trainRequest,\n        options\n      },\n      trainCustomModelOperationSpec,\n      callback) as Promise<Models.TrainCustomModelResponse>;\n  }\n\n  /**\n   * Retrieve the keys that were\n   * extracted during the training of the specified model.\n   * @summary Get Keys\n   * @param id Model identifier.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetExtractedKeysResponse>\n   */\n  getExtractedKeys(id: string, options?: msRest.RequestOptionsBase): Promise<Models.GetExtractedKeysResponse>;\n  /**\n   * @param id Model identifier.\n   * @param callback The callback\n   */\n  getExtractedKeys(id: string, callback: msRest.ServiceCallback<Models.KeysResult>): void;\n  /**\n   * @param id Model identifier.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getExtractedKeys(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.KeysResult>): void;\n  getExtractedKeys(id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.KeysResult>, callback?: msRest.ServiceCallback<Models.KeysResult>): Promise<Models.GetExtractedKeysResponse> {\n    return this.sendOperationRequest(\n      {\n        id,\n        options\n      },\n      getExtractedKeysOperationSpec,\n      callback) as Promise<Models.GetExtractedKeysResponse>;\n  }\n\n  /**\n   * Get information about all trained custom models\n   * @summary Get Models\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetCustomModelsResponse>\n   */\n  getCustomModels(options?: msRest.RequestOptionsBase): Promise<Models.GetCustomModelsResponse>;\n  /**\n   * @param callback The callback\n   */\n  getCustomModels(callback: msRest.ServiceCallback<Models.ModelsResult>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getCustomModels(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ModelsResult>): void;\n  getCustomModels(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ModelsResult>, callback?: msRest.ServiceCallback<Models.ModelsResult>): Promise<Models.GetCustomModelsResponse> {\n    return this.sendOperationRequest(\n      {\n        options\n      },\n      getCustomModelsOperationSpec,\n      callback) as Promise<Models.GetCustomModelsResponse>;\n  }\n\n  /**\n   * Get information about a model.\n   * @summary Get Model\n   * @param id Model identifier.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetCustomModelResponse>\n   */\n  getCustomModel(id: string, options?: msRest.RequestOptionsBase): Promise<Models.GetCustomModelResponse>;\n  /**\n   * @param id Model identifier.\n   * @param callback The callback\n   */\n  getCustomModel(id: string, callback: msRest.ServiceCallback<Models.ModelResult>): void;\n  /**\n   * @param id Model identifier.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getCustomModel(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ModelResult>): void;\n  getCustomModel(id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ModelResult>, callback?: msRest.ServiceCallback<Models.ModelResult>): Promise<Models.GetCustomModelResponse> {\n    return this.sendOperationRequest(\n      {\n        id,\n        options\n      },\n      getCustomModelOperationSpec,\n      callback) as Promise<Models.GetCustomModelResponse>;\n  }\n\n  /**\n   * Delete model artifacts.\n   * @summary Delete Model\n   * @param id The identifier of the model to delete.\n   * @param [options] The optional parameters\n   * @returns Promise<msRest.RestResponse>\n   */\n  deleteCustomModel(id: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;\n  /**\n   * @param id The identifier of the model to delete.\n   * @param callback The callback\n   */\n  deleteCustomModel(id: string, callback: msRest.ServiceCallback<void>): void;\n  /**\n   * @param id The identifier of the model to delete.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  deleteCustomModel(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;\n  deleteCustomModel(id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {\n    return this.sendOperationRequest(\n      {\n        id,\n        options\n      },\n      deleteCustomModelOperationSpec,\n      callback);\n  }\n\n  /**\n   * Extract key-value pairs from a given document. The input document must be of one of the\n   * supported content types - 'application/pdf', 'image/jpeg' or 'image/png'. A success response is\n   * returned in JSON.\n   * @summary Analyze Form\n   * @param id Model Identifier to analyze the document with.\n   * @param formStream A pdf document or image (jpg,png) file to analyze.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.AnalyzeWithCustomModelResponse>\n   */\n  analyzeWithCustomModel(id: string, formStream: msRest.HttpRequestBody, options?: Models.FormRecognizerClientAnalyzeWithCustomModelOptionalParams): Promise<Models.AnalyzeWithCustomModelResponse>;\n  /**\n   * @param id Model Identifier to analyze the document with.\n   * @param formStream A pdf document or image (jpg,png) file to analyze.\n   * @param callback The callback\n   */\n  analyzeWithCustomModel(id: string, formStream: msRest.HttpRequestBody, callback: msRest.ServiceCallback<Models.AnalyzeResult>): void;\n  /**\n   * @param id Model Identifier to analyze the document with.\n   * @param formStream A pdf document or image (jpg,png) file to analyze.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  analyzeWithCustomModel(id: string, formStream: msRest.HttpRequestBody, options: Models.FormRecognizerClientAnalyzeWithCustomModelOptionalParams, callback: msRest.ServiceCallback<Models.AnalyzeResult>): void;\n  analyzeWithCustomModel(id: string, formStream: msRest.HttpRequestBody, options?: Models.FormRecognizerClientAnalyzeWithCustomModelOptionalParams | msRest.ServiceCallback<Models.AnalyzeResult>, callback?: msRest.ServiceCallback<Models.AnalyzeResult>): Promise<Models.AnalyzeWithCustomModelResponse> {\n    return this.sendOperationRequest(\n      {\n        id,\n        formStream,\n        options\n      },\n      analyzeWithCustomModelOperationSpec,\n      callback) as Promise<Models.AnalyzeWithCustomModelResponse>;\n  }\n\n  /**\n   * Batch Read Receipt operation. The response contains a field called 'Operation-Location', which\n   * contains the URL that you must use for your 'Get Read Receipt Result' operation.\n   * @param url Publicly reachable URL of an image.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.BatchReadReceiptResponse>\n   */\n  batchReadReceipt(url: string, options?: msRest.RequestOptionsBase): Promise<Models.BatchReadReceiptResponse>;\n  /**\n   * @param url Publicly reachable URL of an image.\n   * @param callback The callback\n   */\n  batchReadReceipt(url: string, callback: msRest.ServiceCallback<void>): void;\n  /**\n   * @param url Publicly reachable URL of an image.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  batchReadReceipt(url: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;\n  batchReadReceipt(url: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.BatchReadReceiptResponse> {\n    return this.sendOperationRequest(\n      {\n        url,\n        options\n      },\n      batchReadReceiptOperationSpec,\n      callback) as Promise<Models.BatchReadReceiptResponse>;\n  }\n\n  /**\n   * This interface is used for getting the analysis results of a 'Batch Read Receipt' operation. The\n   * URL to this interface should be retrieved from the 'Operation-Location' field returned from the\n   * 'Batch Read Receipt' operation.\n   * @param operationId Id of read operation returned in the response of a 'Batch Read Receipt'\n   * operation.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetReadReceiptResultResponse>\n   */\n  getReadReceiptResult(operationId: string, options?: msRest.RequestOptionsBase): Promise<Models.GetReadReceiptResultResponse>;\n  /**\n   * @param operationId Id of read operation returned in the response of a 'Batch Read Receipt'\n   * operation.\n   * @param callback The callback\n   */\n  getReadReceiptResult(operationId: string, callback: msRest.ServiceCallback<Models.ReadReceiptResult>): void;\n  /**\n   * @param operationId Id of read operation returned in the response of a 'Batch Read Receipt'\n   * operation.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getReadReceiptResult(operationId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ReadReceiptResult>): void;\n  getReadReceiptResult(operationId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ReadReceiptResult>, callback?: msRest.ServiceCallback<Models.ReadReceiptResult>): Promise<Models.GetReadReceiptResultResponse> {\n    return this.sendOperationRequest(\n      {\n        operationId,\n        options\n      },\n      getReadReceiptResultOperationSpec,\n      callback) as Promise<Models.GetReadReceiptResultResponse>;\n  }\n\n  /**\n   * Read Receipt operation. When you use the 'Batch Read Receipt' interface, the response contains a\n   * field called 'Operation-Location'. The 'Operation-Location' field contains the URL that you must\n   * use for your 'Get Read Receipt Result' operation.\n   * @param image An image stream.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.BatchReadReceiptInStreamResponse>\n   */\n  batchReadReceiptInStream(image: msRest.HttpRequestBody, options?: msRest.RequestOptionsBase): Promise<Models.BatchReadReceiptInStreamResponse>;\n  /**\n   * @param image An image stream.\n   * @param callback The callback\n   */\n  batchReadReceiptInStream(image: msRest.HttpRequestBody, callback: msRest.ServiceCallback<void>): void;\n  /**\n   * @param image An image stream.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  batchReadReceiptInStream(image: msRest.HttpRequestBody, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;\n  batchReadReceiptInStream(image: msRest.HttpRequestBody, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.BatchReadReceiptInStreamResponse> {\n    return this.sendOperationRequest(\n      {\n        image,\n        options\n      },\n      batchReadReceiptInStreamOperationSpec,\n      callback) as Promise<Models.BatchReadReceiptInStreamResponse>;\n  }\n}\n\n// Operation Specifications\nconst serializer = new msRest.Serializer(Mappers);\nconst trainCustomModelOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"custom/train\",\n  urlParameters: [\n    Parameters.endpoint\n  ],\n  requestBody: {\n    parameterPath: \"trainRequest\",\n    mapper: {\n      ...Mappers.TrainRequest,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.TrainResult\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  serializer\n};\n\nconst getExtractedKeysOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"custom/models/{id}/keys\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.id\n  ],\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeysResult\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  serializer\n};\n\nconst getCustomModelsOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"custom/models\",\n  urlParameters: [\n    Parameters.endpoint\n  ],\n  responses: {\n    200: {\n      bodyMapper: Mappers.ModelsResult\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  serializer\n};\n\nconst getCustomModelOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"custom/models/{id}\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.id\n  ],\n  responses: {\n    200: {\n      bodyMapper: Mappers.ModelResult\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  serializer\n};\n\nconst deleteCustomModelOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"DELETE\",\n  path: \"custom/models/{id}\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.id\n  ],\n  responses: {\n    204: {},\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  serializer\n};\n\nconst analyzeWithCustomModelOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"custom/models/{id}/analyze\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.id\n  ],\n  queryParameters: [\n    Parameters.keys\n  ],\n  formDataParameters: [\n    Parameters.formStream\n  ],\n  contentType: \"multipart/form-data\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.AnalyzeResult\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  serializer\n};\n\nconst batchReadReceiptOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"prebuilt/receipt/asyncBatchAnalyze\",\n  urlParameters: [\n    Parameters.endpoint\n  ],\n  requestBody: {\n    parameterPath: {\n      url: \"url\"\n    },\n    mapper: {\n      ...Mappers.ImageUrl,\n      required: true\n    }\n  },\n  responses: {\n    202: {\n      headersMapper: Mappers.BatchReadReceiptHeaders\n    },\n    default: {\n      bodyMapper: Mappers.ComputerVisionError\n    }\n  },\n  serializer\n};\n\nconst getReadReceiptResultOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"prebuilt/receipt/operations/{operationId}\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.operationId\n  ],\n  responses: {\n    200: {\n      bodyMapper: Mappers.ReadReceiptResult\n    },\n    default: {\n      bodyMapper: Mappers.ComputerVisionError\n    }\n  },\n  serializer\n};\n\nconst batchReadReceiptInStreamOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"prebuilt/receipt/asyncBatchAnalyze\",\n  urlParameters: [\n    Parameters.endpoint\n  ],\n  requestBody: {\n    parameterPath: \"image\",\n    mapper: {\n      required: true,\n      serializedName: \"Image\",\n      type: {\n        name: \"Stream\"\n      }\n    }\n  },\n  contentType: \"application/octet-stream\",\n  responses: {\n    202: {\n      headersMapper: Mappers.BatchReadReceiptInStreamHeaders\n    },\n    default: {\n      bodyMapper: Mappers.ComputerVisionError\n    }\n  },\n  serializer\n};\n\nexport {\n  FormRecognizerClient,\n  FormRecognizerClientContext,\n  Models as FormRecognizerModels,\n  Mappers as FormRecognizerMappers\n};\n"],"names":["msRest.QueryCollectionFormat","msRest.getDefaultUserAgentValue","msRest.ServiceClient","msRest.Serializer","Parameters.endpoint","Mappers.TrainRequest","Mappers.TrainResult","Mappers.ErrorResponse","Parameters.id","Mappers.KeysResult","Mappers.ModelsResult","Mappers.ModelResult","Parameters.keys","Parameters.formStream","Mappers.AnalyzeResult","Mappers.ImageUrl","Mappers.BatchReadReceiptHeaders","Mappers.ComputerVisionError","Parameters.operationId","Mappers.ReadReceiptResult","Mappers.BatchReadReceiptInStreamHeaders"],"mappings":"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"}